package pl.jblew.ahpaaclient.ui.fragment;

import androidx.fragment.app.Fragment;

import javax.inject.Inject;

import pl.jblew.ahpaaclient.factory.ViewModelFactory;
import pl.jblew.ahpaaclient.ui.advicelist.AdviceListViewModel;

public class AdviceListFragmentOld extends Fragment {

	/*
	 * Step 1: Here, we need to inject the ViewModelFactory.
	 * */
	@Inject
	ViewModelFactory viewModelFactory;

	/*
	 * I am using DataBinding
	 * */
	private AdviceListFragmentBinding binding;

	/*
	 * This is our ViewModel class
	 * */
	AdviceListViewModel adviceListViewModel;

	private AdviceListAdapter adviceListAdapter;

	@Override
	public void onCreate(@Nullable Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		/*
		 * Step 2: Remember in our FragmentModule, we
		 * defined MovieListFragment injection? So we need
		 * to call this method in order to inject the
		 * ViewModelFactory into our Fragment
		 * */
		AndroidSupportInjection.inject(this);
		initialiseViewModel();
	}

	@Nullable
	@Override
	public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
		binding = DataBindingUtil.inflate(inflater, R.layout.fragment_movie_list, container, false);
		return binding.getRoot();
	}

	@Override
	public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);
		initialiseView();
	}

	private void initialiseView() {
		moviesListAdapter = new MoviesListAdapter(getActivity());
		binding.moviesList.setLayoutManager(new LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false));
		binding.moviesList.setAdapter(moviesListAdapter);

		/* SnapHelper to change the background of the activity based on the list item
		 * currently visible */
		SnapHelper startSnapHelper = new PagerSnapHelper(position -> {
			MovieEntity movie = moviesListAdapter.getItem(position);
			((MainActivity)getActivity()).updateBackground(movie.getPosterPath());
		});
		startSnapHelper.attachToRecyclerView(binding.moviesList);
	}


	private void initialiseViewModel() {
		movieListViewModel = ViewModelProviders.of(this, viewModelFactory).get(MovieListViewModel.class);
		movieListViewModel.getMoviesLiveData().observe(this, resource -> {
			if(resource.isLoading()) {
				displayLoader();

			} else if(!resource.data.isEmpty()) {
				updateMoviesList(resource.data);

			} else handleErrorResponse();
		});

		/* Fetch movies list  */
		movieListViewModel.loadMoreMovies();
	}

	private void displayLoader() {
		binding.moviesList.setVisibility(View.GONE);
		binding.loaderLayout.rootView.setVisibility(View.VISIBLE);
	}

	private void hideLoader() {
		binding.moviesList.setVisibility(View.VISIBLE);
		binding.loaderLayout.rootView.setVisibility(View.GONE);
	}

	private void updateMoviesList(List<MovieEntity> movies) {
		hideLoader();
		binding.emptyLayout.emptyContainer.setVisibility(View.GONE);
		binding.moviesList.setVisibility(View.VISIBLE);
		moviesListAdapter.setItems(movies);
	}


	private void handleErrorResponse() {
		hideLoader();
		binding.moviesList.setVisibility(View.GONE);
		binding.emptyLayout.emptyContainer.setVisibility(View.VISIBLE);
	}
}
